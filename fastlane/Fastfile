# This file contains Box iOS Preview SDK release script.
#
# Make sure to run `bundle install` before first run this script in root directory of this repository.
#
# REQUIRED:
#############
# 1) Make sure to run `bundle install` before first run this script in root directory of this repository.
# 2) The computer that invoke these script should have installed node.js with standard-version package.
# 3) To run `bundle exec fastlane make_publish_pod` command, system enviornment `COCOAPODS_TRUNK_TOKEN` should be set to a valid token.
#
# USAGE:
#############
# To make a full release, execute the following 3 commands:
# 1) `bundle exec fastlane make_pull_request`
# 2) `bundle exec fastlane make_release`
# 3) `bundle exec fastlane make_publish_pod`
#
# PARAMETERS:
#############
# preview_version:      Optional parameter. It determines which version of box-ios-preview-sdk we want to release in format: <MAJOR>.<MINOR>.<PATCH>.
#                       When not specified then new version will be based on the previous one with consider commits convetions.
#                       e.g. preview_version:5.6.7
#                       e.g. preview_version:9.11.12
#
# content_version:      Required parameter. It determines latest released version of box-ios-sdk.
#                       e.g. content_version:9.1.1
#                       e.g. content_version:10.11.12
#
# github_token:         Required only if we don't have defined environment variable name "GITHUB_TOKEN".
#                       It's a personal API Token for GitHub - generate one at https://github.com/settings/tokens
#                       It is needed to communicate with GitHub.
#                       e.g. github_token:secret_token_123
#
# dry_run:              Optional parameter. Default value is false.
#                       If false then no any changes will be made on external systems.
#                       e.g. dry_run:true
#
# release_branch:       Optional paremeter. Default value is "main".
#                       It specifies the branch used to create release.
#                       e.g. release_branch:relese_beta_10.11.12
#
# skip_setup_git_user: Optional parameter. Default value is fasle.
#                      It `true` then local git config and `origin` will be used without any modification.
#                      Otherwise these settings will be overwritten by `git_user_name`, `git_user_email`
#                      and `origin` will be set to https url with github_token.
#
# git_user_name:       Required only if skip_setup_git_user is set to `false`.
#                      It determines the git user.name
#
# git_user_email:      Required only if skip_setup_git_user is set to `false`.
#                      It determines the git user.email

default_platform(:ios)

platform :ios do

##############################################################################
# STEP 1) CREATE PR WITH RELEASE CHANGES
##############################################################################

  desc "Create PR with release changes"
  lane :make_pull_request do |options|
    preview_version = options[:preview_version]
    content_version = options[:content_version]
    dry_run = options[:dry_run] || false
    github_token = options[:github_token] || ENV["GITHUB_TOKEN"]
    skip_setup_git_user = options[:skip_setup_git_user] || false
    git_user_name = options[:git_user_name] || ENV["GIT_USER_NAME"]
    git_user_email = options[:git_user_email] || ENV["GIT_USER_EMAIL"]
    release_branch = options[:release_branch] || "main"

    if preview_version.nil?
      preview_version = get_next_release_version()
    end

    if !is_version_valid(version: preview_version)
      UI.user_error!("\"preview_version\" parameter: \"#{preview_version}\" is in invalid format. Required format is <MAJOR>.<MINOR>.<PATCH> e.g.: 1.0.0")
    end

    if content_version.nil?
      UI.user_error!("Missing required parameter \"content_version\"")
    end

    setup_git_user(
      git_user_name: git_user_name,
      git_user_email: git_user_email,
      github_token: github_token,
      skip_setup_git_user: skip_setup_git_user
    )
    ensure_git_clean(release_branch: release_branch)

    bump_version(
      preview_version: preview_version,
      content_version: content_version
    )
    update_changelog(preview_version: preview_version)
    update_documentation()

    create_github_pull_request(
      preview_version: preview_version,
      github_token: github_token,
      release_branch: release_branch,
      dry_run: dry_run
    )
  end

##############################################################################
# STEP 2) CREATE NEW RELEASE ON GITHUB
##############################################################################

  desc "Create new release on github"
  lane :make_release do |options|
    preview_version = options[:preview_version]
    dry_run = options[:dry_run] || false
    github_token = options[:github_token] || ENV["GITHUB_TOKEN"]
    skip_setup_git_user = options[:skip_setup_git_user] || false
    git_user_name = options[:git_user_name] || ENV["GIT_USER_NAME"]
    git_user_email = options[:git_user_email] || ENV["GIT_USER_EMAIL"]
    release_branch = options[:release_branch] || "main"

    if preview_version.nil?
      preview_version = get_next_release_version()
    end

    if !is_version_valid(version: preview_version)
      UI.user_error!("\"preview_version\" parameter: \"#{preview_version}\" is in invalid format. Required format is <MAJOR>.<MINOR>.<PATCH> e.g.: 1.0.0")
    end

    release_notes = get_release_notes(preview_version: preview_version)

    setup_git_user(
      git_user_name: git_user_name,
      git_user_email: git_user_email,
      skip_setup_git_user: skip_setup_git_user
    )
    create_github_release(
      preview_version: preview_version,
      release_notes: release_notes,
      github_token: github_token,
      release_branch: release_branch,
      dry_run: dry_run
    )
  end

##############################################################################
# STEP 3) PUBLISH NEW POD VERSION TO COCOAPODS
##############################################################################

  desc "Publish to version of cocoapods"
  lane :make_publish_pod do |options|
    dry_run = options[:dry_run] || false
    trunk_token = ENV["COCOAPODS_TRUNK_TOKEN"]
    podpsec_name = ENV["PODSPEC_NAME"]

    if dry_run == true
      UI.important("Running in \"dry run\" mode. Publish to cocoapods won't happen.")
    else
      if trunk_token.nil?
        UI.user_error!("System environment \"COCOAPODS_TRUNK_TOKEN\" is required to publish a pod. Aborting script.")
      end
    
      Dir.chdir("..") do
        sh("pod lib lint --allow-warnings")
        sh("pod trunk push #{podpsec_name} --allow-warnings")
      end
    end
  end

##############################################################################
# GITHUB
##############################################################################

  desc "Commit version update"
  private_lane :create_github_pull_request do |options|
    preview_version = options[:preview_version]
    github_token = options[:github_token]
    release_branch = options[:release_branch]
    dry_run = options[:dry_run]
    repository_name = ENV["REPOSITORY_NAME"]
    repository_owner = ENV["REPOSITORY_OWNER"]
    commit_version_tag = "v#{preview_version}"
    commit_title = "chore: release #{commit_version_tag}"

    if dry_run == true
      UI.important("Running in \"dry run\" mode. PR won't be created.")
    else
      Dir.chdir("..") do
        sh("git checkout -b #{commit_version_tag}")
        sh("git add .")
        sh("git commit -am \"#{commit_title}\"")
        sh("git push origin -u #{commit_version_tag}")

        if github_token.nil?
          UI.user_error!("GitHub Token is required to create PR.")
        end

        create_pull_request(
          api_token: github_token,
          repo: "#{repository_owner}/#{repository_name}",
          title: "#{commit_title}",
          head: "#{commit_version_tag}",
          base: "#{release_branch}",
        )
      end
    end
  end

  desc "Create release on GitHub"
  private_lane :create_github_release do |options|
    preview_version = options[:preview_version]
    version_tag = "v#{preview_version}"
    release_notes = options[:release_notes]
    github_token = options[:github_token]
    release_branch = options[:release_branch]
    dry_run = options[:dry_run]
    repository_name = ENV["REPOSITORY_NAME"]
    repository_owner = ENV["REPOSITORY_OWNER"]

    if dry_run == true
      UI.important("Running in \"dry run\" mode. Release won't be published.")
    else
      if github_token.nil?
        UI.user_error!("GitHub Token is required to make release.")
      end

      set_github_release(
        repository_name: "#{repository_owner}/#{repository_name}",
        api_token: github_token,
        name: version_tag,
        tag_name: version_tag,
        description: release_notes,
        commitish: release_branch,
        is_draft: true
      )
    end
  end

##############################################################################
# VERSION
##############################################################################

  desc "Get next release version based on conventional commits"
  private_lane :get_next_release_version do |options|
    release_version = ""
    Dir.chdir("..") do
      release_version = sh("standard-version --dry-run |  sed -En \"s/.*tagging release v(.*)/\\1/p\" | tr -d \"\n\"")
    end

    release_version
  end

  desc "Validate version"
  private_lane :is_version_valid do |options|
    version = options[:version]
    !!(version =~ /^\d+\.\d+\.\d+$/)
  end

  desc "Bump SDK version in all required files"
  private_lane :bump_version do |options|
    preview_version = options[:preview_version]
    content_version = options[:content_version]
    
    update_regular_version( 
      preview_version: preview_version,
      content_version: content_version
    )

    update_sample_apps_version( 
      preview_version: preview_version,
      content_version: content_version
    )
  end

  desc "Update version in configuration and documentation files"
  private_lane :update_regular_version do |options|
    preview_version = options[:preview_version]
    content_version = options[:content_version]
    new_preview_major_version = preview_version.split('.').first.to_i
    new_content_major_version = content_version.split('.').first.to_i

    # Update BoxPreviewSDK.podspec
    podspec_path = ENV["PODSPEC_PATH"]
    pods_content_dependency_version = "#{new_content_major_version}.0"
    sh("sed -i '' -E 's|(.*spec.version.* = ).*|\\1\"#{preview_version}\"|g' #{podspec_path}")
    sh("sed -i '' -E 's|(.*spec.dependency \"BoxSDK\", ).*|\\1\"~> #{pods_content_dependency_version}\"|g' #{podspec_path}")

    # Update Package.swift
    package_path = ENV["PACKAGE_PATH"]
    spm_content_dependency_version = "#{new_content_major_version}.0.0"
    sh("sed -i '' -E 's|(.*package\\(url: \"https://github.com/box/box-ios-sdk.git\", \.upToNextMajor\\(from: ).*(\\)\\).*)|\\1\"#{spm_content_dependency_version}\"\\2|g' #{package_path}")
      
    # Update Info.plist
    info_plist_path = ENV["INFO_PLIST_PATH"]
    sh("plutil -replace CFBundleShortVersionString -string \"#{preview_version}\" #{info_plist_path}")

    # Update README.md and /docs/usage/getting-started.md
    preview_dependency_version = "#{new_preview_major_version}.0"
    content_dependency_version = "#{new_content_major_version}.0"

    readme_path = ENV["README_PATH"]
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-sdk.git\" ~> ).*|\\1#{content_dependency_version}|g' #{readme_path}")
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-preview-sdk.git\" ~> ).*|\\1#{preview_dependency_version}|g' #{readme_path}")
    sh("sed -i '' -E \"s|(^pod 'BoxPreviewSDK', '~> ).*(')|\\1#{preview_dependency_version}\\2|g\"  #{readme_path}")

    getting_started_path = ENV["GETTING_STARTED_PATH"]
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-sdk.git\" ~> ).*|\\1#{content_dependency_version}|g' #{getting_started_path}")
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-preview-sdk.git\" ~> ).*|\\1#{preview_dependency_version}|g' #{getting_started_path}")
    sh("sed -i '' -E \"s|(^pod 'BoxPreviewSDK', '~> ).*(')|\\1#{preview_dependency_version}\\2|g\"  #{getting_started_path}")
  end

  desc "Update version in sample apps"
  private_lane :update_sample_apps_version do |options|
    preview_version = options[:preview_version]
    content_version = options[:content_version]
    new_preview_major_version = preview_version.split('.').first.to_i
    new_content_major_version = content_version.split('.').first.to_i
    preview_dependency_version = "#{new_preview_major_version}.0"
    content_dependency_version = "#{new_content_major_version}.0"

    # Update SDK Cartfile 
    sdk_cartfile_path = ENV["SDK_CARTFILE_PATH"]
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-sdk.git\" ).*|\\1~> #{content_dependency_version}|g' #{sdk_cartfile_path}")
    
    # Update Cartfile from JWTSampleApp
    jwt_app_cartfile_path = ENV["JWT_APP_CARTFILE_PATH"]
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-sdk.git\" ).*|\\1~> #{content_dependency_version}|g' #{jwt_app_cartfile_path}")
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-preview-sdk.git\" ).*|\\1~> #{preview_dependency_version}|g' #{jwt_app_cartfile_path}")
    
    # Update Cartfile from JWTSampleApp
    oauth2_app_cartfile_path = ENV["OAUTH2_APP_CARTFILE_PATH"]
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-sdk.git\" ).*|\\1~> #{content_dependency_version}|g' #{oauth2_app_cartfile_path}")
    sh("sed -i '' -E 's|(^git \"https://github.com/box/box-ios-preview-sdk.git\" ).*|\\1~> #{preview_dependency_version}|g' #{oauth2_app_cartfile_path}")
  end

##############################################################################
# CHANGELOG
##############################################################################

  desc "Return release notes based on conventional commits"
  private_lane :get_release_notes do |options|
    preview_version = options[:preview_version]
    escaped_version = sh("echo \"#{preview_version}\" | sed -E 's/(\\.)/\\\\\\./g' | tr -d \"\n\"")
    release_notes = ""
    
    Dir.chdir("..") do
      release_notes = sh("sed -nE '/^#\{1,\} \\[#{escaped_version}\\]/,/^#\{1,\} \\[[0-9]+\.[0-9]+\.[0-9]+\\]/p' CHANGELOG.md | sed '1,2d' | sed '$d'")
    end
    
    release_notes
  end

  desc "Update CHANGELOG.md file based on conventional commits"
  private_lane :update_changelog do |options|
    preview_version = options[:preview_version]
    update_changelog_script_path = ENV["UPDATE_CHANGELOG_SCRIPT_PATH"]

    Dir.chdir("..") do
      sh("standard-version --skip.tag --skip.commit --release-as #{preview_version}")
      sh("#{update_changelog_script_path}")
    end
  end

##############################################################################
# DOCUMENTATION
##############################################################################

  desc "Update jazzy documentation"
  private_lane :update_documentation do |options|
    bootstrap_path = ENV["BOOTSTRAP_CARTHAGE_PATH"]

    Dir.chdir("..") do
      sh("#{bootstrap_path}")
      sh("jazzy --output docs")
    end
  end

##############################################################################
# GIT
##############################################################################

  desc "Setup git user"
  private_lane :setup_git_user do |options|
    git_user_name = options[:git_user_name]
    git_user_email = options[:git_user_email]
    github_token = options[:github_token]
    skip_setup_git_user = options[:skip_setup_git_user]

    if skip_setup_git_user == true
      UI.important("Skipping setup git user. Current git configuration will be used.")
    else
      repository_name = ENV["REPOSITORY_NAME"]
      repository_owner = ENV["REPOSITORY_OWNER"]

      if git_user_name.nil? || git_user_email.nil?
        UI.user_error!("Git user.name and user.email are requird. Aborting script.")
      end

      remote_url = "https://#{repository_owner}:#{github_token}@github.com/#{repository_owner}/#{repository_name}.git"
      sh("git config user.name #{git_user_name}")
      sh("git config user.email #{git_user_email}")
      sh("git remote set-url origin #{remote_url}")
    end
  end

  desc "Ensure git is clean"
  private_lane :ensure_git_clean do |options|
    release_branch = options[:release_branch]
    current_branch = sh("git rev-parse --abbrev-ref HEAD | tr -d \"\n\"")

    sh("git remote update")

    if current_branch != release_branch
      UI.user_error!("Local branch: \"#{current_branch}\" is different than release branch: \"#{release_branch}\". Abort script.")
    end

    different_commits_count = sh(" git rev-list HEAD...origin/#{release_branch} --count | tr -d \"\n\"")
    if different_commits_count != "0"
      UI.user_error!("Local branch HEAD is different than remote branch HEAD. Abort script.")
    end

    status_result = sh("git status --porcelain")
    if status_result != ""
      UI.user_error!("There are local changes that are not present on the remote. Aborting script.")
    end
  end
end
